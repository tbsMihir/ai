/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LeavePolicyService } from "../leavePolicy.service";
import { LeavePolicyCreateInput } from "./LeavePolicyCreateInput";
import { LeavePolicy } from "./LeavePolicy";
import { LeavePolicyFindManyArgs } from "./LeavePolicyFindManyArgs";
import { LeavePolicyWhereUniqueInput } from "./LeavePolicyWhereUniqueInput";
import { LeavePolicyUpdateInput } from "./LeavePolicyUpdateInput";

export class LeavePolicyControllerBase {
  constructor(protected readonly service: LeavePolicyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LeavePolicy })
  async createLeavePolicy(
    @common.Body() data: LeavePolicyCreateInput
  ): Promise<LeavePolicy> {
    return await this.service.createLeavePolicy({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LeavePolicy] })
  @ApiNestedQuery(LeavePolicyFindManyArgs)
  async leavePolicies(@common.Req() request: Request): Promise<LeavePolicy[]> {
    const args = plainToClass(LeavePolicyFindManyArgs, request.query);
    return this.service.leavePolicies({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LeavePolicy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async leavePolicy(
    @common.Param() params: LeavePolicyWhereUniqueInput
  ): Promise<LeavePolicy | null> {
    const result = await this.service.leavePolicy({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LeavePolicy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLeavePolicy(
    @common.Param() params: LeavePolicyWhereUniqueInput,
    @common.Body() data: LeavePolicyUpdateInput
  ): Promise<LeavePolicy | null> {
    try {
      return await this.service.updateLeavePolicy({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LeavePolicy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLeavePolicy(
    @common.Param() params: LeavePolicyWhereUniqueInput
  ): Promise<LeavePolicy | null> {
    try {
      return await this.service.deleteLeavePolicy({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
