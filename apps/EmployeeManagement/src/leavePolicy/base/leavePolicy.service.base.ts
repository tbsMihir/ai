/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LeavePolicy as PrismaLeavePolicy } from "@prisma/client";

export class LeavePolicyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LeavePolicyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.leavePolicy.count(args);
  }

  async leavePolicies<T extends Prisma.LeavePolicyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeavePolicyFindManyArgs>
  ): Promise<PrismaLeavePolicy[]> {
    return this.prisma.leavePolicy.findMany<Prisma.LeavePolicyFindManyArgs>(
      args
    );
  }
  async leavePolicy<T extends Prisma.LeavePolicyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeavePolicyFindUniqueArgs>
  ): Promise<PrismaLeavePolicy | null> {
    return this.prisma.leavePolicy.findUnique(args);
  }
  async createLeavePolicy<T extends Prisma.LeavePolicyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeavePolicyCreateArgs>
  ): Promise<PrismaLeavePolicy> {
    return this.prisma.leavePolicy.create<T>(args);
  }
  async updateLeavePolicy<T extends Prisma.LeavePolicyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeavePolicyUpdateArgs>
  ): Promise<PrismaLeavePolicy> {
    return this.prisma.leavePolicy.update<T>(args);
  }
  async deleteLeavePolicy<T extends Prisma.LeavePolicyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeavePolicyDeleteArgs>
  ): Promise<PrismaLeavePolicy> {
    return this.prisma.leavePolicy.delete(args);
  }
}
