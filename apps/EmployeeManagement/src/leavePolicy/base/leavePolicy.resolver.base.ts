/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LeavePolicy } from "./LeavePolicy";
import { LeavePolicyCountArgs } from "./LeavePolicyCountArgs";
import { LeavePolicyFindManyArgs } from "./LeavePolicyFindManyArgs";
import { LeavePolicyFindUniqueArgs } from "./LeavePolicyFindUniqueArgs";
import { DeleteLeavePolicyArgs } from "./DeleteLeavePolicyArgs";
import { LeavePolicyService } from "../leavePolicy.service";
@graphql.Resolver(() => LeavePolicy)
export class LeavePolicyResolverBase {
  constructor(protected readonly service: LeavePolicyService) {}

  async _leavePoliciesMeta(
    @graphql.Args() args: LeavePolicyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LeavePolicy])
  async leavePolicies(
    @graphql.Args() args: LeavePolicyFindManyArgs
  ): Promise<LeavePolicy[]> {
    return this.service.leavePolicies(args);
  }

  @graphql.Query(() => LeavePolicy, { nullable: true })
  async leavePolicy(
    @graphql.Args() args: LeavePolicyFindUniqueArgs
  ): Promise<LeavePolicy | null> {
    const result = await this.service.leavePolicy(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LeavePolicy)
  async deleteLeavePolicy(
    @graphql.Args() args: DeleteLeavePolicyArgs
  ): Promise<LeavePolicy | null> {
    try {
      return await this.service.deleteLeavePolicy(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
